require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProjectsController, type: :controller do
  let!(:project) { FactoryGirl.create(:project) }
  let(:valid_attributes) { FactoryGirl.attributes_for(:project) }
  let(:invalid_attributes) { {name: ''} }

  describe "GET #index" do
    before { get :index }
    it { expect(assigns(:projects)).to include(project) }
  end

  describe 'GET #summary' do
    before { get :summary }
    it { expect(assigns(:projects)).to include(project) }
  end

  describe "GET #show" do
    before { get :show, id: project }
    it { expect(assigns(:project)).to eq(project) }
  end

  describe "GET #new" do
    before { get :new }
    it { expect(assigns(:project)).to be_a_new(Project) }
  end

  describe "GET #edit" do
    before { get :edit, id: project }
    it { expect(assigns(:project)).to eq(project) }
  end

  describe "POST #create" do
    let(:request){ post :create, project: attrs }

    context "with valid params" do
      let(:attrs) { valid_attributes }

      it { expect {request}.to change(Project, :count).by(1) }

      context 'assign and redirect project' do
        before { request }
        it { expect(assigns(:project)).to be_a(Project) }
        it { expect(assigns(:project)).to be_persisted }
        it { expect(response).to redirect_to(Project.last) }
      end
    end

    context "with invalid params" do
      let(:attrs) { invalid_attributes }

      it { expect {request}.to_not change(Project, :count) }

      context 'render new template' do
        before { request }
        it { expect(assigns(:project)).to be_a_new(Project) }
        it { expect(response).to render_template("new") }
      end
    end
  end

  describe "PUT #update" do
    let(:request) { put :update, id: project.to_param, project: attrs }

    context "with valid params" do
      let(:attrs){ valid_attributes }

      it { expect {request}.to change{ project.reload.attributes } }

      context 'assigns and redirect' do
        before { request }
        it { expect(assigns(:project)).to eq(project) }
        it { expect(response).to redirect_to(project) }
      end
    end

    context "with invalid params" do
      let(:attrs) { invalid_attributes }

      it { expect {request}.to_not change{project.reload.attributes} }

      context 'render edit template' do
        before { request }

        it { expect(assigns(:project)).to eq(project) }
        it { expect(response).to render_template("edit") }
      end
    end
  end

  describe "DELETE #destroy" do
    let(:request) { delete :destroy, {:id => project.to_param} }

    it { expect {request}.to change(Project, :count).by(-1) }

    it "redirects to the projects list" do
      request
      expect(response).to redirect_to(projects_url)
    end
  end

end
